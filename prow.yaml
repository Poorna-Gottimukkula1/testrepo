# This file contains Kubernetes YAML files for the most important prow
# components. Don't edit resources in this file. Instead, pull them out into
# their own files.
# openssl rand -hex 20 > hmac
# echo "Git hub token" > token
# kubectl create secret -n prow generic hmac-token --from-file=hmac=./hmac
# kubectl create secret -n prow generic github-token --from-file=token=./token
# kubectl create configmap config --from-file=config.yaml=./config.yaml
# kubectl create configmap plugins --from-file=plugins.yaml=./plugins.yaml
# kubectl create configmap job-config --from-file=job-config.yaml=./job-config.yaml
# place .png and .svg files under branding directory
# kubectl create configmap branding --from-file "./branding/"
# kubectl create namespace prow
# kubectl create namespace test-pods
---
apiVersion: v1
kind: Namespace
metadata:
  name: prow
---
apiVersion: v1
kind: Namespace
metadata:
  name: test-pods  
---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   namespace: prow
#   name: plugins
# data:
#   plugins.yaml: |
#     plugins:
#       Poorna-Gottimukkula1:
#         plugins:
#         - approve
#         - assign
#         - blunderbuss
#         - cat
#         - dog
#         - help
#         - heart
#         - hold
#         - label
#         - lgtm
#         - trigger
#         - verify-owners
#         - wip
#         - yuks
---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   namespace: prow
#   name: config
# data:
#   config.yaml: |
#     prowjob_namespace: prow
#     pod_namespace: test-pods

#     in_repo_config:
#       enabled:
#         "*": true

#     deck:
#      branding:
#       header_color: "#3a0052" # Falco Teal
#       logo: "/static/extensions/favicon.png"
#       favicon: "/static/extensions/favicon.png"
#      spyglass:
#        lenses:
#        - lens:
#            name: metadata
#          required_files:
#          - started.json|finished.json
#        - lens:
#            config:
#            name: buildlog
#          required_files:
#          - build-log.txt
#        - lens:
#            name: junit
#          required_files:
#          - .*/junit.*\.xml
#        - lens:
#            name: podinfo
#          required_files:
#          - podinfo.json

#     plank:
#       job_url_prefix_config:
#         "*": https://c28312v1.fyre.ibm.com/view/
#       report_templates:
#         '*': >-
#             [Full PR test history](https://c28312v1.fyre.ibm.com/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}).
#             [Your PR dashboard](https://c28312v1.fyre.ibm.com/pr?query=is:pr+state:open+author:{{with
#             index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}).
#       default_decoration_configs:
#         "*":
#           gcs_configuration:
#             bucket: s3://prow-logs
#             path_strategy: explicit
#           s3_credentials_secret: s3-credentials
#           utility_images:
#             clonerefs: gcr.io/k8s-prow/clonerefs:v20230406-d42c989ab5
#             entrypoint: gcr.io/k8s-prow/entrypoint:v20230406-d42c989ab5
#             initupload: gcr.io/k8s-prow/initupload:v20230406-d42c989ab5
#             sidecar: gcr.io/k8s-prow/sidecar:v20230406-d42c989ab5

#     tide:
#       queries:
#       - labels:
#         - lgtm
#         - approved
#         missingLabels:
#         - needs-rebase
#         - do-not-merge/hold
#         - do-not-merge/work-in-progress
#         - do-not-merge/invalid-owners-file
#         orgs:
#         - Poorna-Gottimukkula1

#     decorate_all_jobs: true
#     periodics:
#     - interval: 5h
#       agent: kubernetes
#       name: echo-test
#       spec:
#         containers:
#         - image: quay.io/jitesoft/alpine:3.18.5
#           command: ["/bin/date"]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: hook
  labels:
    app: hook
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: hook
  template:
    metadata:
      labels:
        app: hook
    spec:
      serviceAccountName: "hook"
      terminationGracePeriodSeconds: 180
      containers:
      - name: hook
        image: gcr.io/k8s-prow/hook:v20230406-d42c989ab5
        imagePullPolicy: Always
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/job-config
        - --github-endpoint=https://api.github.com
        - --github-token-path=/etc/github/token
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: github-token
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: job-config
          mountPath: /etc/job-config
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 600
      volumes:
      - name: hmac
        secret:
          secretName: hmac-token
      - name: github-token
        secret:
          secretName: github-token
      - name: config
        configMap:
          name: config
      - name: job-config
        configMap:
          name: job-config
      - name: plugins
        configMap:
          name: plugins
---
apiVersion: v1
kind: Service
metadata:
  namespace: prow
  name: hook
spec:
  selector:
    app: hook
  ports:
  - port: 8888
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: sinker
  labels:
    app: sinker
spec:
  selector:
    matchLabels:
      app: sinker
  replicas: 1
  template:
    metadata:
      labels:
        app: sinker
    spec:
      serviceAccountName: "sinker"
      containers:
      - name: sinker
        image: gcr.io/k8s-prow/sinker:v20230406-d42c989ab5
        args:
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/job-config
        - --dry-run=false
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: job-config
          mountPath: /etc/job-config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
      - name: job-config
        configMap:
          name: job-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: deck
  labels:
    app: deck
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: deck
  template:
    metadata:
      labels:
        app: deck
    spec:
      serviceAccountName: "deck"
      terminationGracePeriodSeconds: 30
      containers:
      - name: deck
        image: gcr.io/k8s-prow/deck:v20230406-d42c989ab5
        args:
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/job-config
        - --plugin-config=/etc/plugins/plugins.yaml
        - --tide-url=http://tide/
        - --hook-url=http://hook:8888/plugin-help
        - --github-endpoint=https://api.github.com
        - --s3-credentials-file=/etc/s3-credentials/service-account.json
        - --spyglass=true
        - --github-token-path=/etc/github/token
        ports:
          - name: http
            containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: job-config
          mountPath: /etc/job-config
          readOnly: true
        - name: github-token
          mountPath: /etc/github
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
        - name: s3-credentials
          mountPath: /etc/s3-credentials
          readOnly: true
        - name: branding
          mountPath: /var/run/ko/static/extensions
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 600
      volumes:
      - name: config
        configMap:
          name: config
      - name: job-config
        configMap:
          name: job-config
      - name: github-token
        secret:
          secretName: github-token
      - name: plugins
        configMap:
          name: plugins
      - name: s3-credentials
        secret:
          secretName: s3-credentials
      - name: branding
        configMap:
          defaultMode: 420
          name: branding
---
apiVersion: v1
kind: Service
metadata:
  namespace: prow
  name: deck
spec:
  selector:
    app: deck
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: horologium
  labels:
    app: horologium
spec:
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: horologium
  template:
    metadata:
      labels:
        app: horologium
    spec:
      serviceAccountName: "horologium"
      terminationGracePeriodSeconds: 30
      containers:
      - name: horologium
        image: gcr.io/k8s-prow/horologium:v20230406-d42c989ab5
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/job-config
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: job-config
          mountPath: /etc/job-config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
      - name: job-config
        configMap:
          name: job-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: tide
  labels:
    app: tide
spec:
  replicas: 1 # Do not scale up.
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: tide
  template:
    metadata:
      labels:
        app: tide
    spec:
      serviceAccountName: "tide"
      containers:
      - name: tide
        image: gcr.io/k8s-prow/tide:v20230406-d42c989ab5
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/job-config
        - --github-endpoint=https://api.github.com
        - --s3-credentials-file=/etc/s3-credentials/service-account.json
        - --status-path=s3://tide/tide-status
        - --history-uri=s3://tide/tide-history.json
        - --github-token-path=/etc/github/token
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: github-token
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: job-config
          mountPath: /etc/job-config
          readOnly: true
        - name: s3-credentials
          mountPath: /etc/s3-credentials
          readOnly: true
      volumes:
      - name: github-token
        secret:
          secretName: github-token
      - name: config
        configMap:
          name: config
      - name: job-config
        configMap:
          name: job-config
      - name: s3-credentials
        secret:
          secretName: s3-credentials
---
apiVersion: v1
kind: Service
metadata:
  namespace: prow
  name: tide
spec:
  selector:
    app: tide
  ports:
  - port: 80
    targetPort: 8888
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: prow
  name: prow
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  ingressClassName: nginx
  rules:
  - host: c28312v1.fyre.ibm.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: deck
            port:
              number: 80
      - path: /hook
        pathType: Prefix
        backend:
          service:
            name: hook
            port:
              number: 8888
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: statusreconciler
  namespace: prow
  labels:
    app: statusreconciler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: statusreconciler
  template:
    metadata:
      labels:
        app: statusreconciler
    spec:
      serviceAccountName: statusreconciler
      terminationGracePeriodSeconds: 180
      containers:
      - name: statusreconciler
        image: gcr.io/k8s-prow/status-reconciler:v20230406-d42c989ab5
        args:
        - --dry-run=false
        - --continue-on-error=true
        - --plugin-config=/etc/plugins/plugins.yaml
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/job-config
        - --github-endpoint=https://api.github.com
        - --s3-credentials-file=/etc/s3-credentials/service-account.json
        - --status-path=s3://status-reconciler/status-reconciler-status
        - --github-token-path=/etc/github/token
        volumeMounts:
        - name: github-token
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: job-config
          mountPath: /etc/job-config
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
        - name: s3-credentials
          mountPath: /etc/s3-credentials
          readOnly: true
      volumes:
      - name: github-token
        secret:
          secretName: github-token
      - name: config
        configMap:
          name: config
      - name: job-config
        configMap:
          name: job-config
      - name: plugins
        configMap:
          name: plugins
      - name: s3-credentials
        secret:
          secretName: s3-credentials
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: prow
  name: "deck"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "deck"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "deck"
subjects:
- kind: ServiceAccount
  name: "deck"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-pods
  name: "deck"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "deck"
subjects:
- kind: ServiceAccount
  name: "deck"
  namespace: prow
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "deck"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - list
      - watch
      # Required when deck runs with `--rerun-creates-job=true`
      # **Warning:** Only use this for non-public deck instances, this allows
      # anyone with access to your Deck instance to create new Prowjobs
      # - create
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-pods
  name: "deck"
rules:
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: prow
  name: "horologium"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "horologium"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
      - watch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "horologium"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "horologium"
subjects:
- kind: ServiceAccount
  name: "horologium"
---
kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: prow
  name: "sinker"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "sinker"
rules:
  - apiGroups:
    - "prow.k8s.io"
    resources:
    - prowjobs
    verbs:
    - delete
    - list
    - watch
    - get
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    resourceNames:
    - prow-sinker-leaderlock
    verbs:
    - get
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - configmaps
    resourceNames:
    - prow-sinker-leaderlock
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - configmaps
    - events
    verbs:
    - create
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-pods
  name: "sinker"
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - list
      - watch
      - get
      - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "sinker"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "sinker"
subjects:
- kind: ServiceAccount
  name: "sinker"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-pods
  name: "sinker"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "sinker"
subjects:
- kind: ServiceAccount
  name: "sinker"
  namespace: prow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prow
  name: "hook"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "hook"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - get
      - list
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - get
      - update
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "hook"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "hook"
subjects:
- kind: ServiceAccount
  name: "hook"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prow
  name: "tide"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "tide"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
      - get
      - watch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "tide"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "tide"
subjects:
- kind: ServiceAccount
  name: "tide"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prow
  name: "statusreconciler"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "statusreconciler"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: "statusreconciler"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "statusreconciler"
subjects:
- kind: ServiceAccount
  name: "statusreconciler"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: prow-controller-manager
  labels:
    app: prow-controller-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prow-controller-manager
  template:
    metadata:
      labels:
        app: prow-controller-manager
    spec:
      serviceAccountName: prow-controller-manager
      containers:
      - name: prow-controller-manager
        args:
        - --dry-run=false
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/job-config
        - --github-endpoint=https://api.github.com
        - --enable-controller=plank
        - --github-token-path=/etc/github/token
        image: gcr.io/k8s-prow/prow-controller-manager:v20230406-d42c989ab5
        volumeMounts:
        - name: github-token
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: job-config
          mountPath: /etc/job-config
          readOnly: true
      volumes:
      - name: github-token
        secret:
          secretName: github-token
      - name: config
        configMap:
          name: config
      - name: job-config
        configMap:
          name: job-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prow
  name: prow-controller-manager
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: prow-controller-manager
rules:
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    resourceNames:
    - prow-controller-manager-leader-lock
    verbs:
    - get
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - prow-controller-manager-leader-lock
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
      - events
    verbs:
      - create
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-pods
  name: prow-controller-manager
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - get
      - list
      - watch
      - create
      - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: prow-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-controller-manager
subjects:
- kind: ServiceAccount
  name: prow-controller-manager
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-pods
  name: prow-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-controller-manager
subjects:
- kind: ServiceAccount
  name: prow-controller-manager
  namespace: prow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prow
  name: crier
  labels:
    app: crier
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crier
  template:
    metadata:
      labels:
        app: crier
    spec:
      serviceAccountName: crier
      terminationGracePeriodSeconds: 30
      containers:
      - name: crier
        image: gcr.io/k8s-prow/crier:v20230406-d42c989ab5
        args:
        - --blob-storage-workers=10
        - --config-path=/etc/config/config.yaml
        - --job-config-path=/etc/job-config
        - --s3-credentials-file=/etc/s3-credentials/service-account.json
        - --github-endpoint=https://api.github.com
        - --github-workers=10
        - --kubernetes-blob-storage-workers=10
        - --github-token-path=/etc/github/token
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: job-config
          mountPath: /etc/job-config
          readOnly: true
        - name: github-token
          mountPath: /etc/github
          readOnly: true
        - name: s3-credentials
          mountPath: /etc/s3-credentials
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
      - name: job-config
        configMap:
          name: job-config
      - name: github-token
        secret:
          secretName: github-token
      - name: s3-credentials
        secret:
          secretName: s3-credentials
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: crier
  namespace: prow
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: prow
  name: crier
rules:
- apiGroups:
    - "prow.k8s.io"
  resources:
    - "prowjobs"
  verbs:
    - "get"
    - "watch"
    - "list"
    - "patch"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-pods
  name: crier
rules:
- apiGroups:
    - ""
  resources:
    - "pods"
    - "events"
  verbs:
    - "get"
    - "list"
- apiGroups:
    - ""
  resources:
    - "pods"
  verbs:
    - "patch"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crier
  namespace: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: crier
subjects:
- kind: ServiceAccount
  name: crier
  namespace: prow
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crier
  namespace: test-pods
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: crier
subjects:
- kind: ServiceAccount
  name: crier
  namespace: prow
---
apiVersion: v1
kind: Secret
metadata:
  namespace: prow
  name: s3-credentials
stringData:
  service-account.json: |
    {
      "region": "<<BUCKETS_REGION>>",
      "access_key": "<<INSTANCE_ACESS_KEY>>",
      "endpoint": "<<BUCKETS_ENDPOINT>>",
      "insecure": true,
      "s3_force_path_style": true,
      "secret_key": "<<INSTANCE_SECRET_KEY>>"
    }
---
apiVersion: v1
kind: Secret
metadata:
  namespace: test-pods
  name: s3-credentials
stringData:
  service-account.json: |
    {
      "region": "<<BUCKETS_REGION>>",
      "access_key": "<<INSTANCE_ACESS_KEY>>",
      "endpoint": "<<BUCKETS_ENDPOINT>>",
      "insecure": true,
      "s3_force_path_style": true,
      "secret_key": "<<INSTANCE_SECRET_KEY>>"
    }
